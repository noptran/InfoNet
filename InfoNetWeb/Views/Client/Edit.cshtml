@model Client

@{
	ViewBag.Title = "Client Summary";
}

@using (Html.BeginForm("Edit", "Client", FormMethod.Post, new { id = "main", autocomplete = "off", data_icjia_role = "dirty.form" })) {
	@Html.AntiForgeryToken()
	@Html.HiddenFor(model => model.ClientId)
	<div class="row">
		<div class="col-sm-6">
			<div class="panel panel-primary icjia-error-group">
				<div class="panel-heading">
					<h2 class="panel-title">Demographics</h2>
				</div>
				<div class="panel-body">
					<div class="form-group">
						@Html.LabelFor(model => model.ClientCode, new { @class = "control-label", data_toggle = "tooltip", title = "This is the unique identifier assigned to your client to protect their identifying information. This identifier must not contain any personal information about your client, e.g. birth dates, initials, etc." })
						@Html.TextBoxFor(model => model.ClientCode, new { @class = "form-control" })
						@Html.ValidationMessageFor(model => model.ClientCode, "", new { @class = "help-block" })
					</div>
					<div class="form-group">
						@Html.LabelFor(model => model.ClientTypeId, new { @class = "control-label" })
						@Html.TextBoxFor(model => Lookups.ClientType[Model.ClientTypeId].Description, new { @class = "form-control", disabled = "disabled" })
						@Html.LookupFor(model => model.ClientTypeId, null, new { style = "display:none" })
						@Html.ValidationMessageFor(model => model.ClientTypeId, "", new { @class = "help-block" })
					</div>
					<div class="form-group">
						@Html.LabelFor(model => model.GenderIdentityId, new { @class = "control-label", data_toggle = "tooltip", title = "Select the option your client most closely identifies with." })
						@Html.LookupFor(model => model.GenderIdentityId, "<Pick One>", new { @class = "form-control" })
						@Html.ValidationMessageFor(model => model.GenderIdentityId, "", new { @class = "help-block" })
					</div>
					@if (Model.Provider != Provider.CAC) {						
						<fieldset class="form-group" aria-required="true">
							<legend class="icjia-required" data-toggle="tooltip" title="Select all options for which your client identifies. If they choose not to identify, select Unknown.">@Html.DisplayNameFor(model => model.RaceHudIds)</legend>
							<div class="icjia-checkbox-group">
								@foreach (var race in Lookups.RaceHud[Model.Provider]) {
									<div class="checkbox">
										<label class="control-label">
											<input class="race" id="@("race" + race.CodeId)" type="checkbox" name="RaceHudIds" value="@race.CodeId" checked="@(Model.RaceHudIds.Contains(race.CodeId) ? "checked" : null)" data-val="true" data-val-mandatory="At least one @Html.DisplayNameFor(model => model.RaceHudIds) must be selected." />
											@race.Description
										</label>
									</div>
								}
							</div>
							@Html.ValidationMessageFor(model => model.RaceHudIds, "", new { @class = "help-block" })
						</fieldset>
					} else {
						<div class="form-group">
							@Html.LabelFor(model => model.RaceId, new { @class = "control-label", data_toggle = "tooltip", title = "Select the option your client identifies with. If they choose not to identify, select Unknown." })
							@Html.LookupFor(model => model.RaceId, "<Pick One>", new { @class = "form-control", data_val_required = $"The {Html.DisplayNameFor(model => model.RaceId)} field is required." })
							@Html.ValidationMessageFor(model => model.RaceId, "", new { @class = "help-block" })
						</div>
					}
					<div class="row">
						<div class="col-xs-6">
							@if (Model.IsChildNonVictim) {
								<button id="upgradeType" class="btn btn-primary" type="button">Change to Victim</button>
							}
						</div>
						<div class="col-xs-6">
							<div class="pull-right">
								@Html.Snippets().SaveButton(new { id = "saveButton", type = "button", data_icjia_role = "preventDuplicateRequest", accesskey = "s" })
								@Html.Snippets().UndoLink(Url.Action(), new { accesskey = "u" })
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-6">
			<div class="panel panel-primary">
				<div class="panel-heading">
					<h2 class="panel-title">
						<span class="icjia-panel-title-text">Client Cases</span>
					</h2>
				</div>
				<div class="panel-body">
					@if (Model.ClientId != null) {
						<table id="grid-basic" class="table table-condensed table-hover table-striped">
							<thead>
							<tr>
								<th scope="col" data-column-id="caseId" data-type="numeric">Case #</th>
								<th scope="col" data-column-id="firstContactDate" data-order="desc">First Contact</th>
								<th scope="col" data-column-id="age">Age</th>
								<th scope="col"><span class="sr-only">Action</span></th>
							</tr>
							</thead>
							<tbody>
							@{  foreach (var each in Model.ClientCases.OrderBy(m => m.CaseId)) {
									<tr>
										<td>
											@Html.DisplayFor(m => each.CaseId)
										</td>
										<td>
											@Html.DisplayFor(m => each.FirstContactDate)
										</td>
										<td>
											@Html.DisplayFor(m => each.Age)
										</td>
										<td>
											<div class="btn-group pull-right">
												@Html.ActionLink("Edit", "Edit", "Case", new { clientId = each.ClientId, caseId = each.CaseId }, new { @class = "btn btn-xs btn-primary btn-outline" })
												<button type="button" class="btn btn-xs btn-primary btn-outline dropdown-toggle" style="padding-left: 4px; padding-right: 4px;" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
													<span class="caret"></span>
													<span class="sr-only">Toggle Dropdown</span>
												</button>
												<ul class="dropdown-menu">
													<li><a href="@Url.Action("Edit", "Case", new { clientId = each.ClientId, caseId = each.CaseId })">Intake</a></li>
													@if (each.Client.IsAdult || each.Client.IsVictim) {
														<li><a href="@Url.Action("Medical", "Case", new { clientId = each.ClientId, caseId = each.CaseId })">Medical/Criminal Justice</a></li>
													}
													@if (each.Client.IsAdult || each.Client.IsVictim || each.Client.IsChildVictim) {
														<li><a href="@Url.Action("Offenders", "Case", new { clientId = each.ClientId, caseId = each.CaseId })">Offenders</a></li>
													}
													@if (each.Client.IsChildVictim) {
														<li><a href="@Url.Action("Investigation", "Case", new { clientId = each.ClientId, caseId = each.CaseId })">Investigation</a></li>
													}
													<li><a href="@Url.Action("Services", "Case", new { clientId = each.ClientId, caseId = each.CaseId })">Services</a></li>
													<li><a href="@Url.Action("Closeout", "Case", new { clientId = each.ClientId, caseId = each.CaseId })">Case Closeout</a></li>
												</ul>
											</div>

										</td>
									</tr>
								}
							}
							</tbody>
						</table>
					
						if (Model.Provider != Provider.SA) {
							<button class="btn btn-primary pull-right" id="newCaseLink"><span class="glyphicon glyphicon-plus-sign" style="margin-right: 5px;"></span>Open New Case</button>
						}
					}
					
				</div>
			</div>
		</div>
	</div>
}


@Html.Hidden("NoDatesAvail", (bool)(ViewBag.NoDatesAvail ?? false))
@if ((bool)ViewBag.ShowWarning) {
	string msg = (string)ViewBag.WarningMessage;
	<div id="warningMessage" style="display:none">
		@Html.Raw(msg)
	</div>
}

@section Scripts {
	@if (Model.Provider != Provider.CAC) {
		@Scripts.Render("~/Scripts/Views/Case/_Races.js")
	}
	@if (Model.Provider == Provider.CAC) {
		@Scripts.Render(("~/Scripts/Views/Case/_FirstContactAge.js"))
	}
	@Scripts.Render("~/Scripts/Views/Client/ClientSummary.js")
}