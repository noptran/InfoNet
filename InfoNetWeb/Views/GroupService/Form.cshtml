@model Infonet.Web.ViewModels.Services.GroupServiceViewModel

@{
    ViewBag.Title = Model.ICS_ID == null ? "New Group Service" : "Edit Group Service";
    int staffindex = 0;
    int attendeeindex = 0;

    if (Model.Attendees != null && Model.ProgramDetailStaff != null) {
        staffindex = Model.ProgramDetailStaff.Count - 1;
        attendeeindex = Model.Attendees.Count - 1;
    }
}

@using (Html.BeginForm("Form", "GroupService", FormMethod.Post, new { id = "main", autocomplete = "off", data_icjia_role = "dirty.form" })) {
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.ProgramID, new { @class = "control-label", data_toggle = "tooltip", title = "Select the type of Group Service provided to clients from the drop-down menu." })
            @Html.DropDownListFor(m => m.ProgramID, new SelectList(ViewBag.GrpServices, "CodeID", "Description", Model.ProgramID), "<Pick One>", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.ProgramID, "", new { @class = "help-block" })
        </div>
    </div>
    <h3>Service Details</h3>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(m => m.NumOfSession, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the number of group service sessions conducted." })
                @Html.TextBoxFor(m => m.NumOfSession, new { @class = "form-control", type = "number" })
                @Html.ValidationMessageFor(m => m.NumOfSession, "", new { @class = "help-block" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Hours, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the number of hours the group session lasted, estimated to the nearest quarter hour." })
                @Html.TextBoxFor(m => m.Hours, new { @class = "form-control", type = "number", step = 0.25 })
                @Html.ValidationMessageFor(m => m.Hours, "", new { @class = "help-block" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(m => m.ParticipantsNum, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the unduplicated number of clients who attended this group service." })
                @Html.TextBoxFor(m => m.ParticipantsNum, new { @class = "form-control", type = "number" })
                @Html.ValidationMessageFor(m => m.ParticipantsNum, "", new { @class = "help-block" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.PDate, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the date this group service session was provided." })
                <div class="input-group date" data-provide="datepicker" data-date-end-date=@DateTime.Today.ToShortDateString()>
                    @Html.TextBoxFor(m => m.PDate, "{0:MM/dd/yyyy}", new { @class = "form-control" })
                    <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                </div>
                @Html.ValidationMessageFor(m => m.PDate, "", new { @class = "help-block" })
            </div>
        </div>
        @Html.HiddenFor(m => m.ICS_ID)
    </div>

    <hr style="margin-top: 15px"/>
    <h3 data_toggle="tooltip" title="Select the name(s) of the staff who provided this group service.">Staff Details</h3>

    <table id="staff" class="table table-responsive table-borderless table-borderless-stretch mb-0">
        <thead>
            <tr>
                <th scope="col">@Html.LabelFor(m => m.ProgramDetailStaff[staffindex].SVID, new { data_toggle = "tooltip", title = "Select the name(s) of the staff who provided this group service." })</th>
                <th scope="col">@Html.LabelFor(m => m.ProgramDetailStaff[staffindex].ConductHours, new { data_toggle = "tooltip", title = "For each staff person, enter the number of hours spent conducting the session, or hours spent actually providing the group service to clients. Estimate to the nearest quarter hour." })</th>
                <th scope="col">@Html.LabelFor(m => m.ProgramDetailStaff[staffindex].HoursPrep, new { data_toggle = "tooltip", title = "For each staff person, enter the number of hours spent preparing the session. If no preparation time was necessary, enter zero (0). Estimate to the nearest quarter hour." })</th>
                <th scope="col">@Html.LabelFor(m => m.ProgramDetailStaff[staffindex].HoursTravel, new { data_toggle = "tooltip", title = "For each staff person, enter the number of hours spent traveling to and from the session. If no travel time was necessary, enter zero (0). Estimate to the nearest quarter hour." })</th>
            </tr>
        </thead>
        <tbody>
            @Html.Partial("_NewStaffPartial", Model)
        </tbody>
    </table>

    <div class="form-group" style="margin-bottom: 30px">
        <input id="staffCount" type="hidden" class="insert-staff" value="@staffindex" />
        <input type="hidden" id="originalStaffCount" value="@staffindex" />
        <button type="button" class="btn btn-default btn-outline insert-staff" value="@staffindex"><span class="glyphicon glyphicon-plus-sign"></span>&nbsp;Add New Staff</button>
    </div>

    <hr />
    <h3>Attendees Details</h3>

    <table id="attendees" class="table table-responsive table-borderless table-borderless-stretch mb-0">
        <thead>
            <tr>
                <th scope="col" style="border:none">@Html.LabelFor(m => m.Attendees[attendeeindex].ServiceDetailOfClient.ClientID, new { data_toggle = "tooltip", title = "Enter all or a part of a Client ID to search for available clients according the characters in their Client ID number." })</th>
                <th scope="col" style="border:none">@Html.LabelFor(m => m.Attendees[attendeeindex].ServiceDetailOfClient.CaseID)</th>
                <th scope="col" style="border:none">@Html.LabelFor(m => m.Attendees[attendeeindex].ServiceDetailOfClient.ReceivedHours, new { data_toggle = "tooltip", title = "Enter the number of group service hours for each respective client to the nearest quarter hour. You should only edit the default number of hours if the client left the group service early" })</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Attendees != null) {
                for (int i = 0; i < Model.Attendees.Count; i++) {
            <tr class="attendeeInfo">
                <td class="attendeeMainCells col-xs-5" style="border:none; padding-top: 0;">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Attendees[i].ClientCode, new { @class = "form-control attendeeData typeahead clientCode", autocomplete = "off" })
                        @Html.ValidationMessageFor(m => m.Attendees[i].ClientCode, "", new { @class = "help-block" })
                        @Html.HiddenFor(m => m.Attendees[i].ServiceDetailOfClient.ClientID, new { @class = "attendeeData" })
                        @Html.HiddenFor(m => m.Attendees[i].ServiceDetailOfClient.ServiceDetailID, new { @class = "attendeeData" })
                        @Html.HiddenFor(m => m.Attendees[i].ServiceDetailOfClient.ICS_ID, new { @class = "attendeeData" })
                    </div>
                </td>
                <td class="attendeeMainCells col-xs-4" style="border:none; padding-top: 0;">
                    <div class="form-group">
                        @Html.DropDownListFor(m => m.Attendees[i].ServiceDetailOfClient.CaseID, Model.Attendees[i].Cases, new { @class = "form-control attendeeData caseList" })
                        @Html.ValidationMessageFor(m => m.Attendees[i].ServiceDetailOfClient.CaseID, "", new { @class = "help-block" })
                    </div>
                </td>
                <td class="attendeeMainCells col-xs-2" style="border:none; padding-top: 0;">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Attendees[i].ServiceDetailOfClient.ReceivedHours, new { @class = "form-control attendeeData", type = "number", step = 0.25 })
                        @Html.ValidationMessageFor(m => m.Attendees[i].ServiceDetailOfClient.ReceivedHours, "", new { @class = "help-block" })
                    </div>
                </td>
                <td class="deleteAttendeeRow deleteButton" style="border:none; padding-top: 0"><button class="btn btn-danger" type="button"><span class="glyphicon glyphicon-trash"></span></button></td>
                <td class="restoreAttendeeRow hide" style="border:none; padding-top: 0px"><button type="button" class="btn btn-primary" aria-label="Restore Deleted Attendee" data-icjia-role="attendee.restore"><span class="glyphicon glyphicon-undo"></span></button></td>
            </tr>
                }
            }
        </tbody>
    </table>

    <div class="form-group" style="margin-bottom: 30px">
        <input id="attendeeCount" type="hidden" class="insert-attendee" value="@attendeeindex" />
        <input type="hidden" id="originalAttendeeCount" value="@attendeeindex" />
        <button type="button" class="btn btn-default btn-outline insert-attendee" value="@attendeeindex"><span class="glyphicon glyphicon-plus-sign"></span>&nbsp;Add New Attendee</button>
        <button type="button" class="btn btn-default btn-outline" id="searchModalButton" data-toggle="modal" data-target="#searchModal"><span class="glyphicon glyphicon-search"></span>&nbsp;&nbsp;Add Clients by Search</button>
    </div>

    <div class="form-group text-right">
        <div class="btn-group">
            @Html.Snippets().SaveButton(new { id = "saveButton", data_icjia_role = "preventDuplicateRequest", accesskey = "s" })
            <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="caret"></span>
                <span class="sr-only">Toggle Dropdown</span>
            </button>
            <ul class="dropdown-menu icjia-btn-dropdown">
                <li>@Html.Snippets().SaveAddButton(new { id = "saveAddButton", data_icjia_role = "preventDuplicateRequest", accesskey = "a" })</li>
            </ul>
        </div>
        @Html.Snippets().UndoLink(Url.Action(), new { accesskey = "u" })

        @if (Model.ProgramID == 0) {
            <a href="@TempData.Peek("GroupServiceReturnUrl")" class="btn btn-danger">Cancel</a>
        } else {
            @Html.Snippets().DeleteLink(Url.Action("DeleteGroupService", "GroupService", new { id = Model.ICS_ID }), new { accesskey = "d" })
        }
    </div>
    <input type="hidden" id="saveAddNew" name="SaveAddNew" value="0">
    <input type="hidden" value="@TempData.Peek("GroupServiceReturnUrl")" name="ReturnURL" />
}

@Html.Partial("_ClientSearch", Model.ClientSearchViewModel)

<div class="form-group">
    <a href="@TempData.Peek("GroupServiceReturnUrl")"><span class='glyphicon glyphicon-chevron-left' aria-hidden='true'></span><span class='glyphicon glyphicon-chevron-left' style='margin-left:-6px' aria-hidden='true'></span>Back to Group Service Search</a>
</div>

@section styles{
    <style>
        @@media screen and (min-width: 1200px) {
            #searchModal {
                top: 5%;
                left: 50%;
                outline: none;
            }
        }

        .staffMainCells {
            width: 23%;
        }

        .attendeeMainCells {
            vertical-align: top;
        }

        .deleteButton {
            vertical-align: baseline;
            width: 40px;
            cursor: pointer;
            border: none;
            padding-top: 0;
        }

        .searchResults {
            overflow-y: scroll;
        }

        #attendees {
            display: none;
        }
    </style>
}

@section scripts{
    @Scripts.Render("~/bundles/typeahead")
    <script src="~/Scripts/Views/Services/_GroupServices.js"></script>
    <script src="~/Scripts/ICJIA/date-ranges.js"></script>
}