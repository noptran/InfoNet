@model Infonet.Web.ViewModels.Services.EventViewModel

@{
	ViewBag.Title = (Model.ProgramID == 0 ? "New" : "Edit") + " Event";

	const int staffindex = 0;
	int staffCount = Model.EventDetailStaff?.Count ?? 0;
}

<div id="Events">
	@using (Html.BeginForm("Form", "Event", FormMethod.Post, new { id = "main", autocomplete = "off", data_icjia_role = "dirty.form" })) {
		@Html.AntiForgeryToken()
		@Html.HiddenFor(m => m.ICS_ID)
		<div class="row">
			<div class="form-group col-md-6">
				@Html.LabelFor(m => m.ProgramID, new { @class = "control-label", data_toggle = "tooltip", title = "Select the type of event staff hosted/supported." })
				@Html.DropDownListFor(m => m.ProgramID, new SelectList(ViewBag.EventTypes, "CodeID", "Description", Model.ProgramID), "<Pick One>", new { @class = "form-control" })
				@Html.ValidationMessageFor(m => m.ProgramID, "", new { @class = "help-block" })
			</div>
		</div>
		<div class="row">
			<div class="col-xs-12">
				<h2>Event Details</h2>
			</div>
		</div>
		<div class="row">
			<div class="col-md-6">
				<div class="form-group">
					@Html.LabelFor(m => m.EventDate, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the date this event occurred. If you are entering one record for multiple events that occurred over more than one date, e.g. weekly, monthly, enter the last date for the period represented." })
					<div class="input-group date" data-provide="datepicker" data-date-end-date=@DateTime.Today.ToShortDateString()>
						@Html.TextBoxFor(m => m.EventDate, "{0:MM/dd/yyyy}", new { @class = "form-control" })
						<span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
					</div>
					@Html.ValidationMessageFor(m => m.EventDate, "", new { @class = "help-block" })
				</div>
				<div class="form-group">
					@Html.LabelFor(m => m.EventName, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the name or title of this event." })
					@Html.TextBoxFor(m => m.EventName, new { @class = "form-control" })
					@Html.ValidationMessageFor(m => m.EventName, "", new { @class = "help-block" })
				</div>
				<div class="form-group">
					@Html.LabelFor(m => m.EventHours, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the total hours for the event." })
					@Html.TextBoxFor(m => m.EventHours, new { @class = "form-control", type = "number", step = ".25" })
					@Html.ValidationMessageFor(m => m.EventHours, "", new { @class = "help-block" })
				</div>
				<div class="form-group">
					@Html.LabelFor(m => m.NumPeopleReached, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the number of people reached from this event. Estimates are acceptable." })
					@Html.TextBoxFor(m => m.NumPeopleReached, new { @class = "form-control", type = "number" })
					@Html.ValidationMessageFor(m => m.NumPeopleReached, "", new { @class = "help-block" })
				</div>

			</div>
			<div class="col-md-6">
				<div class="form-group">
					@Html.LabelFor(m => m.Location, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the location where this community event was held. You may enter a zip code, city, neighborhood, or other geographic location. It is strongly recommended that geographic levels entered here are consistent for all event records, e.g. always a city, zip code, etc." })
					@Html.TextBoxFor(m => m.Location, new { @class = "form-control" })
					@Html.ValidationMessageFor(m => m.Location, "", new { @class = "help-block" })
				</div>
				<div class="form-group">
					@Html.LabelFor(m => m.StateID, new { @class = "control-label", data_toggle = "tooltip", title = "Select the state where this event was held." })
					@Html.DropDownListFor(m => m.StateID, new SelectList(Data.Usps.States, "ID", "StateAbbreviation", Model.StateID ?? Data.Usps.Illinois.ID), new { @class = "form-control", data_icjia_role = "StateCounty", data_icjia_county = "select[name$='CountyID']" })
					@Html.ValidationMessageFor(m => m.StateID, "", new { @class = "help-block" })
				</div>
				<div class="form-group">
					@Html.LabelFor(m => m.CountyID, new { @class = "control-label", data_toggle = "tooltip", title = "Select the county where this event was held. If the event occurred in another state, change the state field to that state to adjust menu options. If the county is not known, select Unknown." })
					@Html.DropDownListFor(m => m.CountyID, new SelectList(Data.Usps.GetCountiesByState(Model.StateID ?? Data.Usps.Illinois.ID), "ID", "CountyName", Model.CountyID), "<Pick One>", new { @class = "form-control" })
					@Html.ValidationMessageFor(m => m.CountyID, "", new { @class = "help-block" })
				</div>
			</div>
		</div>
		<div class="row">
			<div class="form-group col-xs-12">
				@Html.LabelFor(m => m.Comment, new { @class = "control-label", data_toggle = "tooltip", title = "Enter any comments regarding this event if important to document for the record, e.g. more detailed description, agency where the event was held, type of population reached, etc." })
				@Html.TextAreaFor(m => m.Comment, new { @class = "form-control", style = "resize: vertical;" })
				<div id="charRemaining" class="text-info">&nbsp;<span id="charRemainingCount"></span> characters remaining</div>
				@Html.ValidationMessageFor(m => m.Comment, "", new { @class = "help-block" })
			</div>
		</div>
		<div class="row">
			<div class="col-xs-12">
				<h2>Staff Information</h2>
			</div>
		</div>
		<table id="staff" class="table table-responsive icjia-table-borderless">
			<thead>
				<tr>
					<th scope="col">@Html.LabelFor(m => m.EventDetailStaff[staffindex].SVID, new { @class = "control-label", data_toggle = "tooltip", title = "Select the staff person(s)/volunteer(s) who helped support this event." })</th>
					<th scope="col">@Html.LabelFor(m => m.EventDetailStaff[staffindex].HoursConduct, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the number of hours this staff person spent presenting or providing the community event." })</th>
					<th scope="col">@Html.LabelFor(m => m.EventDetailStaff[staffindex].HoursPrep, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the number of hours this staff person spent preparing for the community event." })</th>
					<th scope="col">@Html.LabelFor(m => m.EventDetailStaff[staffindex].HoursTravel, new { @class = "control-label", data_toggle = "tooltip", title = "Enter the number of hours this staff person spent traveling to and from the community event." })</th>
                    <th scope="col"><span class="sr-only">Action</span></th>
				</tr>
			</thead>
			<tbody>
				@Html.Partial("_Staff", Model)
			</tbody>
			<tfoot style="border:0">
				<tr>
					<td colspan="5" style="border:0; padding-top: 0;">
						<button type="button" class="btn btn-default btn-outline staff_AddNew"><span class="glyphicon glyphicon-plus-sign"></span>&nbsp;Add New Staff</button>
						<input type="hidden" id="staffCount" value="@staffCount" />
					</td>
				</tr>
			</tfoot>
		</table>
		<input type="hidden" id="saveAddNew" value="0" name="saveAddNew" />
		<input type="hidden" id="returnURL" value="@TempData.Peek("EventReturnUrl")" name="ReturnURL" />
		<div class="row">
			<div class="col-xs-12">
				<div class="pull-right">
					<div class="btn-group text-center">
						@Html.Snippets().SaveButton(new { id = "saveButton", data_icjia_role = "preventDuplicateRequest", accesskey = "s" })
						<button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
							<span class="caret"></span>
							<span class="sr-only">Toggle Dropdown</span>
						</button>
						<ul class="dropdown-menu icjia-btn-dropdown">
							<li><a class="btn-success" onclick="if (validateMyForm2()) $('#main').submit();" href="#" accesskey="a">Save & Add New</a></li>
						</ul>
					</div>
					@Html.Snippets().UndoLink(Url.Action(), new { accesskey = "u" })
					@if (Model.ProgramID == 0) {
						<a href="@TempData.Peek("EventReturnUrl")" class="btn btn-danger">Cancel</a>
					} else {
					    @Html.Snippets().DeleteLink(Url.Action("Delete", "Event", new { id = Model.ICS_ID }), new { accesskey = "d" })
					}
				</div>
			</div>
		</div>
	}
</div>
<div class="form-group">
	<a href="@TempData.Peek("EventReturnUrl")"><span class='glyphicon glyphicon-chevron-left' aria-hidden='true'></span><span class='glyphicon glyphicon-chevron-left' style='margin-left:-6px' aria-hidden='true'></span>Back to Event Search</a>
</div>

@section Styles {
	<style>
		.glyphicon-remove {
			color: #333;
		}
	</style>
}

@section Scripts {
	<script src="~/Scripts/ICJIA/state-county.js"></script>
	<script src="~/Scripts/Views/Services/Event.js"></script>
	<script type="text/javascript">
		function validateMyForm() {
			removeEmptyStaff();
			return true;
		}

		function validateMyForm2() {
			$('#saveAddNew').val('1');
			return validateMyForm();
		}
	</script>
}