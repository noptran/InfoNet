@using PagedList.Mvc;
@using PagedList;
@model IPagedList<CancellationsEdit>



	<div class="row">
		<div class="col-sm-12">
			<div class="table-responsive">
				<table class="table table-striped table-bordered table-list" id="cancellationsTableEdit" data-assigned-id="@Model">
					<thead>
						<tr>
							<th scope="col" class="col-md-3">Action</th>
							<th scope="col" class="col-md-3"><span class="icjia-required" data-toggle="tooltip" title="Select the service type from the drop-down menu that the client either canceled or did not show up for the appointment.">Service</span></th>
							<th scope="col" class="col-md-2"><span class="icjia-required" data-toggle="tooltip" title="Select the reason the service was not provided (cancellation or no show).">Reason</span></th>
							<th scope="col" class="col-md-3"><span class="icjia-required" data-toggle="tooltip" title="Select the staff member who was scheduled to provide the service from the drop-down menu.">Staff</span></th>
							<th scope="col" class="col-md-1"><span class="icjia-required" data-toggle="tooltip" title="Enter the date this service was scheduled to occur.">Date</span></th>
						</tr>
					</thead>
					<tbody>

@{
	if (Model != null) {
		var cancellationServicesFullList = "CancellationsEditServices";
		var cancellationReasonsFullList = "CancellationsEditReasons";
		for (int i = 0; i < Model.Count; i++) {
			var setIndex = Model[i].Index != null ? Model[i].Index : i;
			if (i == 0) {
			@Html.LookupFor(model => model[i].ServiceID, Lookups.DirectOrGroupServices[Session.Center().Provider], "<Pick One>", false, new { @class = "form-control hidden", Id = cancellationServicesFullList, Name = cancellationServicesFullList })
			@Html.LookupFor(model => model[i].ReasonID, Lookups.CancellationReason[Session.Center().Provider], "<Pick One>", false, new { @class = "form-control hidden", Id = cancellationReasonsFullList, Name = cancellationReasonsFullList })
			}
			<tr data-icjia-role="clientsidepagination">
				<td class="text-center">
					<div class="form-group" style="margin:0; width:130px;">
						@if (Model[i].LocationID == Session.Center().Id) {
							<label>
								@Html.CheckBox("CancellationsEdit[" + setIndex + "].IsEdited", Model[i].IsEdited, new { Id = "CancellationsEdit_" + setIndex + "__IsEdited", Onchange = "checkboxEnableRow(this); actionCheckboxUncheck(this)" })
								Edit
							</label>
							<span style="padding-right:10px;"></span>
							<label>
								@Html.CheckBox("CancellationsEdit[" + setIndex + "].IsDeleted", Model[i].IsDeleted, new { Id = "CancellationsEdit_" + setIndex + "__IsDeleted", Onchange = "cancellationsCheckboxDisableRow(this); actionCheckboxUncheck(this);", data_icjia_role = "cancellation.isdeleted" })
								Delete
							</label>
						} else {
							<h4><span class="label label-info" style="vertical-align:top;">Read Only</span></h4>
						}
						<input type="hidden" name="CancellationsEdit[@(setIndex)].Index" value="@setIndex" />
						<input type="hidden" name="CancellationsEdit[@(setIndex)].CaseID" value="@Model[i].CaseID" />
						<input type="hidden" name="CancellationsEdit[@(setIndex)].ClientID" value="@Model[i].ClientID" />
						<input type="hidden" name="CancellationsEdit[@(setIndex)].ID" value="@Model[i].ID" />
						<input type="hidden" name="CancellationsEdit[@(setIndex)].LocationID" value="@Model[i].LocationID" />
					</div>
				</td>
				<td>
					<div class="form-group" style="margin:0; min-width: 225px;">
						@Html.LookupFor(model => model[i].ServiceID, Model[i].IsEdited ? Lookups.DirectOrGroupServices[Session.Center().Provider] : (IEnumerable<LookupCode>)new[] { Lookups.DirectOrGroupServices[Model[i].ServiceID] }
							, "<Pick One>", true, Html.Attributes(new { @class = "form-control", Name = "CancellationsEdit[" + setIndex + "].ServiceID", Id = "CancellationsEdit_" + setIndex + "__ServiceID", data_icjia_change_dropdown = cancellationServicesFullList }).AndIf(!Model[i].IsEdited, new { Disabled = true }))
						@Html.ValidationMessage("CancellationsEdit[" + setIndex + "].ServiceID", "", new { @class = "help-block" })

					</div>
				</td>
				<td>
					<div class="form-group" style="margin:0; min-width:120px;">
						@Html.LookupFor(m => m[i].ReasonID, Model[i].IsEdited ? Lookups.CancellationReason[Session.Center().Provider] : (IEnumerable<LookupCode>)new[] { Lookups.CancellationReason[Model[i].ReasonID] },
							"<Pick One>", true, Html.Attributes(new { @class = "form-control group1", Name = "CancellationsEdit[" + setIndex + "].ReasonID", Id = "CancellationsEdit_" + setIndex + "__ReasonID", data_icjia_change_dropdown = cancellationReasonsFullList }).AndIf(!Model[i].IsEdited, new { Disabled = true }))
						@Html.ValidationMessage("CancellationsEdit[" + setIndex + "].ReasonID", "", new { @class = "help-block" })
					</div>
				</td>
				<td>
					<div class="form-group" style="margin:0; min-width: 250px;">
						@Html.DropDownListFor(model => Model[i].SVID, new SelectList(
							Model[i].IsEdited == false ? Model[i].SVID == null ? Enumerable.Empty<Infonet.Data.Helpers.Staff>() : new[] { Data.Centers.GetStaffFromSvId((int)Model[i].SVID) } : Data.Centers.GetStaffForCenterAndDateRetainCurrentSvid(Model[i].Date, Session.Center().Id, Model[i].SVID),
							"SVID", "EmployeeName", Model[i].SVID),
							"<Pick One>", Html.Attributes(new { @class = "form-control group1", Name = "CancellationsEdit[" + setIndex + "].SVID", Id = "CancellationsEdit_" + setIndex + "__SVID", data_icjia_service_staff = true }).AndIf(!Model[i].IsEdited, new { Disabled = true }))
						@Html.ValidationMessage("CancellationsEdit[" + setIndex + "].SVID", "", new { @class = "help-block" })
					</div>
				</td>
				<td>
					<div class="form-group" style="margin:0; min-width:100px;">
						@Html.TextBoxFor(m => m[i].Date, "{0:MM/dd/yyyy}",
							Html.Attributes(new { data_provide = "datepicker", data_date_end_date = DateTime.Today.ToShortDateString(), Class = "inline-date form-control date group1", data_val_firstcontactdate = "Cannot be earlier than the case's First Contact Date.", Name = "CancellationsEdit[" + setIndex + "].Date", Id = "CancellationsEdit_" + setIndex + "__Date", data_icjia_service_date = true }).AndIf(!Model[i].IsEdited, new { Disabled = true }))
						@Html.ValidationMessage("CancellationsEdit[" + setIndex + "].Date", "", new { @class = "help-block" })
					</div>

					<input type="hidden" name="CancellationsEdit[@(setIndex)].ServiceID" value="@Model[i].ServiceID" />
					<input type="hidden" name="CancellationsEdit[@(setIndex)].ReasonID" value="@Model[i].ReasonID" />
					<input type="hidden" name="CancellationsEdit[@(setIndex)].Date" value='@(Model[i].Date.HasValue? Model[i].Date.Value.ToShortDateString() : "") ' />
					<input type="hidden" name="CancellationsEdit[@(setIndex)].SVID" value="@Model[i].SVID" />
				</td>
			</tr>

		}
	}
}
			</tbody>
			</table>
			<div class="form-group" id="cancellationsPagedList" data-pagination-link="@Url.Action("CancellationsSearch")">
				@Html.PagedListPager(Model, page => Url.Action("CancellationsSearch", "Case", new {
					page,}), Html.Snippets().PagedListRenderOptions(new[] { "cancellationsPagedList", "dirtyignore" }, new[] { "pagedListMultiples" }))
				@Html.Partial("_PagedListFooter", Model, new ViewDataDictionary { { "isMultiples", true }, { "id", "CancellationsSearchDates_[0]__PageSize" }, { "name", "CancellationsSearchDates[0].PageSize" }, { "class", "" }, { "paginationFor", "cancellations" } })
				@Html.Hidden("CancellationsSearchDates[0].Page", Model.PageNumber)
			</div>
		</div>
	</div>
</div>